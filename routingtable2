import sys
from heapq import heapify,heappush,heappop
from prettytable import PrettyTable

def dijkstra(graph,src,dest):
    inf = sys.maxsize
    node_data = {}
    for node in graph:
        node_data[node] = {'cost':inf,'pred':[]}
    node_data[src]['cost'] = 0
    visited = []
    temp = src
    for i in range(len(graph)):
        if temp not in visited:
            visited.append(temp)
            min_heap = []
            for j in graph[temp]:
                if j not in visited:
                    cost = node_data[temp]['cost'] + graph[temp][j]
                    if cost < node_data[j]['cost']:
                        node_data[j]['cost'] = cost
                        node_data[j]['pred'] = node_data[temp]['pred'] + [temp]
                    heappush(min_heap,(node_data[j]['cost'],j))
            heapify(min_heap)
            if len(min_heap) > 0:
                temp = min_heap[0][1]
            else:
                break
    x = PrettyTable()
    x.field_names = ["Destination Node", "Distance", "Shortest Path"]
    for node in node_data:
        x.add_row([node, node_data[node]['cost'], node_data[node]['pred'] + [node]])
    print(f"Shortest paths from {src}:")
    print(x)
    print()

if __name__ == "__main__":
    graph = {
             'A':{'B':2,'C':4},
             'B':{'A':2,'C':3,'D':8},
             'C':{'A':4,'B':3,'E':5,'D':2},
             'D':{'B':8,'C':2,'E':11,'F':22},
             'E':{'C':5,'D':11,'F':1},
             'F':{'D':22,'E':1}
             }
    for node in graph:
        dijkstra(graph, node, None)
